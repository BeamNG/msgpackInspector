<#@ include file="..\Core.ttinclude" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#+
const string StreamEndMessage = "\"Stream unexpectedly ends.\"";
const string TypeErrorMessage = "\"Cannot convert '{0}' type value from type '{2}'(0x{1:X}).\"";

/// <summary>
///		Writes unpack code.
/// </summary>
/// <param name="type">Unpacking primitive scalar type.</param>
private void WriteUnpack( Type type )
{
	var nullableUnderlying  = Nullable.GetUnderlyingType( type );
	WriteUnpackCore( nullableUnderlying ?? type, nullableUnderlying != null );
}

private void WriteHelperMethods()
{
#>
private static void ReadBytes( Stream source, byte[] buffer, int offset, int expectedSize )
{
	if ( expectedSize == 0 )
	{
		// Reading 0 byte from stream causes exception in some implementation (issue #60, reported from @odyth).
		return; 
	}

	var currentOffset = offset;
	var reading = expectedSize;
	while ( true )
	{
		var read = source.Read( buffer, currentOffset, reading );
		if ( read == reading )
		{
			return;
		}
		else if ( read == 0 )
		{
			throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
		}
		else
		{
			currentOffset += read;
			reading = expectedSize -= read;
		}
	}
}
<#+
}

private void WriteUnpackCore( Type type, bool isNullable )
{
#>
#if DEBUG
Contract.Assert( source != null, "source != null" );
Contract.Assert( buffer != null, "buffer != null" );
#endif // DEBUG

var header = source.ReadByte();
if( header < 0 )
{
<#+
	this.PushIndent( 1 );
	this.OnFailedToReadHeader( type.Name );
	this.PopIndent();
#>
}

<#+
	if( type == typeof( bool ) )
	{
#>
switch( header )
{
	case 0xC3:
	{
<#+
		this.PushIndent( 2 );
		this.OnReturnScalar( "true" );
		this.WriteReturn( "true" );
		this.PopIndent();
#>
	}
	case 0xC2:
	{
<#+
		this.PushIndent( 2 );
		this.OnReturnScalar( "false" );
		this.WriteReturn( "false" );
		this.PopIndent();
#>
	}
<#+
	if (isNullable)
	{
#>
	case 0xC0:
	{
<#+
		this.PushIndent( 2 );
		this.OnReturnScalar( "null" );
		this.WriteReturn( "null" );
		this.PopIndent();
#>
	}
<#+
	}
#>
	default:
	{
		throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, <#= TypeErrorMessage #>, typeof( bool ), header, MessagePackCode.ToString( header ) ) );
	}
}
<#+
		return;
	}
	else if( type == typeof( sbyte ) )
	{
#>
if( header < 0x80 )
{
	var resultValue = unchecked( ( sbyte )header );
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar( "resultValue" );
		this.WriteReturn( "resultValue" );
		this.PopIndent();
#>
}
<#+
	}
	else
	{
#>
if( header < 0x80 )
{
	var resultValue = unchecked( ( byte )header );
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar( "resultValue" );
		this.WriteReturn( "resultValue" );
		this.PopIndent();
#>
}
<#+
	}
#>

<#+
	if( type != typeof( byte ) && type.Name[ 0 ] != 'U' )
	{
#>
if( header >= 0xE0 )
{
	var resultValue = unchecked( ( sbyte )header );
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar( "resultValue" );
		this.WriteReturn( "resultValue" );
		this.PopIndent();
#>
}
<#+
	}

	if( isNullable )
	{
#>
if( header == MessagePackCode.NilValue )
{
<#+
		this.PushIndent( 1 );
		this.OnReturnScalar( "null" );
		this.WriteReturn( "null" );
		this.PopIndent();
#>
}
<#+
	} 
#>

switch( header )
{
<#+
foreach( var entry in 
	Enumerable.Repeat( "SignedInt", 4 ).Zip( ( new []{ 8, 16, 32, 64 } ).Select( i => i.ToString( CultureInfo.InvariantCulture ) ), ( l, r ) => l + r )
	.Concat(
		Enumerable.Repeat( "UnsignedInt", 4 ).Zip( ( new []{ 8, 16, 32, 64 } ).Select( i => i.ToString( CultureInfo.InvariantCulture ) ), ( l, r ) => l + r )
	).Concat(
		Enumerable.Repeat( "Real", 2 ).Zip( ( new []{ 32, 64 } ).Select( i => i.ToString( CultureInfo.InvariantCulture ) ), ( l, r ) => l + r )
	).Zip(
		new []
		{
			typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
			typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
			typeof( float ), typeof( double )
		},
		( Code, CodeType ) => new { Code, CodeType }
	)
)
{
	if( CanConvertTo( type, entry.Code ) )
	{
#>
	case MessagePackCode.<#= entry.Code #>:
	{
		ReadBytes( source, buffer, 0, <#= Marshal.SizeOf( entry.CodeType ).ToString( CultureInfo.InvariantCulture ) #> );
<#+
		if( entry.CodeType != type )
		{
			// Overflow checking
#>
		var resultValue = checked( ( <#= type.Name #> )BigEndianBinary.To<#= entry.CodeType.Name #>( buffer, 0 ) );
<#+
		}
		else
		{
#>
		var resultValue = BigEndianBinary.To<#= entry.CodeType.Name #>( buffer, 0 );
<#+
		}

		this.PushIndent( 3 );
		this.OnReturnScalar( "resultValue" );
		this.WriteReturn( "resultValue" );
		this.PopIndent();
#>
	}
<#+
	}
}
#>
	default:
	{
		throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, <#= TypeErrorMessage #>, typeof( <#= type.Name #> ), header, MessagePackCode.ToString( header ) ) );
	}
}
<#+
}

/// <summary>
///		Writes unpack raw to byte array logic.
/// </summary>
/// <param name="allocationWriter">A delegate which takes allocation size expression and offset variable name, and returns byte array allocation expression.</param>
private void WriteUnpackByteArray( Func<string, string, string> allocationWriter  )
{
	WriteUnpackRawLength( "System.Byte[]", "result" );
#>
#region UnpackByteArray

if ( size == 0 )
{
	result = Binary.Empty;
<#+
	this.PushIndent( 1 );
	this.OnReturnScalarObject( "result" );
	this.PopIndent();
#>
	return true;
}

int contentBufferOffset = 0;
var resultValue = <#= allocationWriter( "size", "contentBufferOffset" ) #>;
<#+
	WriteUnpackRawContent( "resultValue", "contentBufferOffset", "size" );
#>
#endregion UnpackByteArray
<#+
}

/// <summary>
///		Writes unpack code.
/// </summary>
private void WriteUnpackString()
{
#>
#if DEBUG
Contract.Assert( encoding != null, "encoding != null" );
#endif // DEBUG
<#+
	WriteUnpackRawLength( typeof( String ).FullName, "result" );
#>
#region UnpackString

if ( size == 0 )
{
	result = String.Empty;
<#+
	this.PushIndent( 1 );
	this.OnReturnScalarObject( "result" );
	this.PopIndent();
#>
	return true;
}

var decoder = encoding.GetDecoder();
int chunkSize = size > 16 * 1024 ? 16 * 1024 : size;
var bytes = new byte[ chunkSize ];
var chars = new char[ chunkSize ];
var stringBuffer = new StringBuilder( size );
var remaining = size;
do
{
	var reading = ( remaining > bytes.Length ) ? bytes.Length : remaining;
	var bytesRead = source.Read( bytes, 0, reading );
	if ( bytesRead == 0 )
	{
		throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
	}

	remaining -= bytesRead;

	var isCompleted = false;
	var bytesOffset = 0;

	while( !isCompleted )
	{
		int bytesUsed;
		int charsUsed;
		decoder.Convert(
			bytes, 
			bytesOffset,
			bytesRead - bytesOffset,
			chars,
			0,
			chars.Length,
			( bytesRead == 0 ), // flush when last read.
			out bytesUsed,
			out charsUsed,
			out isCompleted
		);
	
		stringBuffer.Append( chars, 0, charsUsed );
		bytesOffset += bytesUsed;
	}
} while( remaining > 0 );

var resultValue = stringBuffer.ToString();
#endregion UnpackString
<#+
}

private void WriteUnpackRawLength( string typeName, string resultVariable )
{
#>
#region UnpackRawLength
#if DEBUG
Contract.Assert( source != null, "source != null" );
Contract.Assert( buffer != null, "buffer != null" );
#endif // DEBUG

var header = source.ReadByte();
if( header < 0 )
{
	<#= resultVariable #> = null;
	return false;
}

int size;
switch( header )
{
	case MessagePackCode.NilValue:
	{
<#+
	this.PushIndent( 2 );
	this.OnNilRawValue();
	this.PopIndent();
#>
	}
	case MessagePackCode.Bin8: 
	case MessagePackCode.Str8: 
	{
		size = source.ReadByte();
		if( size < 0 )
		{
			throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
		}

		break;
	}
	case MessagePackCode.Bin16: 
	case MessagePackCode.Raw16: 
	{
		ReadBytes( source, buffer, 0, 2 );
		size = BigEndianBinary.ToUInt16( buffer, 0 );
		break;
	}
	case MessagePackCode.Bin32:
	case MessagePackCode.Raw32:
	{
		ReadBytes( source, buffer, 0, 4 );
<#+
// TODO: Net45_LongArray
#>
		var unsignedSize = BigEndianBinary.ToUInt32( buffer, 0 );
		if( unsignedSize > Int32.MaxValue )
		{
<#+
	this.PushIndent( 3 );
	this.WriteTooLargeException();
	this.PopIndent();
#>
		}

		size = unchecked( ( int )unsignedSize );
		break;
	}
	default:
	{
		if( MessagePackCode.MinimumFixedRaw <= header && header <= MessagePackCode.MaximumFixedRaw )
		{
			size = ( header & 0x1F );
			break;
		}

		throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, <#= TypeErrorMessage #>, "<#= typeName #>", header, MessagePackCode.ToString( header ) ) );
	}
}// switch
#endregion UnpackRawLength
<#+
}

private void WriteUnpackRawContent( string bufferVariable, string bufferOffsetVariable, string lengthVariable )
{
#>
#region UnpackRawContent

ReadBytes( source, <#= bufferVariable #>, <#= bufferOffsetVariable #>, <#= lengthVariable #> );

#endregion UnpackRawContent
<#+
}

/// <summary>
///		Writes MessagePackObject unpacking code.
/// </summary>
private void WriteUnpackObject()
{
#>
#if DEBUG
Contract.Assert( source != null, "source != null" );
Contract.Assert( buffer != null, "buffer != null" );
#endif // DEBUG

var header = source.ReadByte();
if( header < 0 )
{
<#+
	this.PushIndent( 1 );
	this.OnFailedToReadHeader( "MessagePackObject" );
	this.PopIndent();
#>
}

switch( header )
{
	case MessagePackCode.NilValue:
	{
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "MessagePackObject.Nil" );
	this.WriteReturn( "MessagePackObject.Nil" );
	this.PopIndent();
#>
	}
	case MessagePackCode.TrueValue:
	{
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "Unpacking.TrueValue" );
	this.WriteReturn( "Unpacking.TrueValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.FalseValue:
	{
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "Unpacking.FalseValue" );
	this.WriteReturn( "Unpacking.FalseValue" );
	this.PopIndent();
#>
	}
}

if( header < 0x80 )
{
<#+
	this.PushIndent( 1 );
	this.OnReturnScalarObject( "Unpacking.PositiveIntegers[ header ]" );
	this.WriteReturn( "Unpacking.PositiveIntegers[ header ]" );
	this.PopIndent();
#>
}
else if( header >= 0xE0 )
{
<#+
	this.PushIndent( 1 );
	this.OnReturnScalarObject( "Unpacking.NegativeIntegers[ header - 0xE0 ]" );
	this.WriteReturn( "Unpacking.NegativeIntegers[ header - 0xE0 ]" );
	this.PopIndent();
#>
}

switch( header & 0xF0 )
{
	case 0x80:
	{
		var size = header & 0xF;
<#+
	this.PushIndent( 2 );
	this.OnIsMap( "size" );
	this.WriteReturn( "Unpacking.PositiveIntegers[ size ]" );
	this.PopIndent();
#>
	}
	case 0x90:
	{
		var size = header & 0xF;
<#+
	this.PushIndent( 2 );
	this.OnIsArray( "size" );
	this.WriteReturn( "Unpacking.PositiveIntegers[ size ]" );
	this.PopIndent();
#>
	}
	case 0xA0:
	case 0xB0:
	{
		var size = header & 0x1F;
		var resultValue = new byte[ size ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "size" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", false ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
}

switch( header )
{
<#+
foreach( var entry in 
	Enumerable.Repeat( "SignedInt", 4 ).Zip( ( new []{ 8, 16, 32, 64 } ).Select( i => i.ToString( CultureInfo.InvariantCulture ) ), ( l, r ) => l + r )
	.Concat(
		Enumerable.Repeat( "UnsignedInt", 4 ).Zip( ( new []{ 8, 16, 32, 64 } ).Select( i => i.ToString( CultureInfo.InvariantCulture ) ), ( l, r ) => l + r )
	).Concat(
		Enumerable.Repeat( "Real", 2 ).Zip( ( new []{ 32, 64 } ).Select( i => i.ToString( CultureInfo.InvariantCulture ) ), ( l, r ) => l + r )
	).Zip(
		new [] 
		{
			typeof( sbyte ), typeof( short ), typeof( int ), typeof( long ),
			typeof( byte ), typeof( ushort ), typeof( uint ), typeof( ulong ),
			typeof( float ), typeof( double )
		},
		( Code, Type ) => new { Code, Type }
	)
)
{
#>
	case MessagePackCode.<#= entry.Code #>:
	{
		<#= entry.Type.Name #> resultValue;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( entry.Type, "resultValue" );
	this.OnReturnScalarObject( "resultValue" );
	this.WriteReturn( "resultValue" );
	this.PopIndent();
#>
	}
<#+
}
#>
	case MessagePackCode.Bin8:
	{
		byte length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( byte ), "length" );
	this.PopIndent();
#>
		var resultValue = new byte[ length ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "length" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", true ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Str8:
	{
		byte length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( byte ), "length" );
	this.PopIndent();
#>
		var resultValue = new byte[ length ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "length" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", false ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Bin16:
	{
		ushort length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( ushort ), "length" );
	this.PopIndent();
#>
		var resultValue = new byte[ length ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "length" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", true ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Raw16:
	{
		ushort length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( ushort ), "length" );
	this.PopIndent();
#>
		var resultValue = new byte[ length ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "length" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", false ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Bin32:
	{
		uint length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( uint ), "length" );
	this.PopIndent();
#>
		if( length > Int32.MaxValue )
		{
<#+
	this.PushIndent( 3 );
	this.WriteTooLargeException();
	this.PopIndent();
#>
		}

		var size = unchecked( ( int )length );
		var resultValue = new byte[ size ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "size" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", true ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Raw32:
	{
		uint length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( uint ), "length" );
	this.PopIndent();
#>
		if( length > Int32.MaxValue )
		{
<#+
	this.PushIndent( 3 );
	this.WriteTooLargeException();
	this.PopIndent();
#>
		}

		var size = unchecked( ( int )length );
		var resultValue = new byte[ size ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "resultValue", "0", "size" );
	this.PopIndent();
#>
		var resultMpoValue = <#= CreateNewMessagePackString( "resultValue", false ) #>;
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Array16:
	{
		ushort length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( ushort ), "length" );
	this.OnIsArray( "length" );
	this.WriteReturn( "length" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Array32:
	{
		uint length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( uint ), "length" );
	this.OnIsArray( "length" );
	this.WriteReturn( "( long )length" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Map16:
	{
		ushort length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( ushort ), "length" );
	this.OnIsMap( "length" );
	this.WriteReturn( "length" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Map32:
	{
		uint length;
<#+
	this.PushIndent( 2 );
	this.WriteUnpackScalar( typeof( uint ), "length" );
	this.OnIsMap( "length" );
	this.WriteReturn( "( long )length" );
	this.PopIndent();
#>
	}
<#+
	foreach ( var length in new [] { 1, 2, 4, 8, 16 } )
	{
#>
	case MessagePackCode.FixExt<#= length #>:
	{
<#+
		this.WriteUnpackFixedLengthExtendedTypeObject( length );
#>
	}
<#+
	}

	foreach ( var type in new [] { typeof( byte ), typeof( ushort ), typeof( uint ) } )
	{
#>
	case MessagePackCode.Ext<#= System.Runtime.InteropServices.Marshal.SizeOf( type ) * 8 #>:
	{
<#+
		this.WriteUnpackVariableLengthExtendedTypeObject( type );
#>
	}
<#+
	}
#>
	default:
	{
#if DEBUG
		Contract.Assert( header == 0xC1, "Unhandled header:" + header.ToString( "X2" ) );
#endif // DEBUG
		throw new UnassignedMessageTypeException( String.Format( CultureInfo.CurrentCulture, "Unknown header value 0x{0:X}", header ) );
	}
}
<#+
}

private string CreateNewMessagePackString( string resultVariable, bool isBin )
{
	return "new MessagePackObject( new MessagePackString( " + resultVariable + ", " + isBin.ToString().ToLowerInvariant() + " ) )";
}

private void WriteUnpackScalar( Type type, string resultVariable )
{
#>
#region UnpackScalar

ReadBytes( source, buffer, 0, <#= Marshal.SizeOf( type ).ToString( CultureInfo.InvariantCulture ) #> );
<#= resultVariable #> = BigEndianBinary.To<#= type.Name #>( buffer, 0 );

#endregion UnpackScalar
<#+
}

private void WriteTooLargeException()
{
#>
throw new MessageNotSupportedException( "MessagePack for CLI cannot handle large binary which has more than Int32.MaxValue bytes." );
<#+
}

/// <summary>
///		Writes array length unpacking.
/// <summary>
private void WriteUnpackArrayLength()
{
#>
#region UnpackArrayLength
#if DEBUG
Contract.Assert( source != null, "source != null" );
Contract.Assert( buffer != null, "buffer != null" );
#endif // DEBUG

var header = source.ReadByte();
if( header < 0 )
{
	throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
}

switch( header )
{
	case MessagePackCode.Array16: 
	{
		ReadBytes( source, buffer, 0, 2 );
		result = BigEndianBinary.ToUInt16( buffer, 0 );
<#+
	this.PushIndent( 2 );
	this.OnIsArray( "result" );
	this.WriteReturn( "result" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Array32:
	{
		ReadBytes( source, buffer, 0, 4 );
<#+
// TODO: Net45_LongArray
#>
		var unsignedSize = BigEndianBinary.ToUInt32( buffer, 0 );
		if( unsignedSize > Int32.MaxValue )
		{
<#+
	this.PushIndent( 3 );
	this.WriteTooLargeException();
	this.PopIndent();
#>
		}

		result = unsignedSize;
<#+
	this.PushIndent( 2 );
	this.OnIsArray( "result" );
	this.WriteReturn( "result" );
	this.PopIndent();
#>
	}
	default:
	{
		if( MessagePackCode.MinimumFixedArray <= header && header <= MessagePackCode.MaximumFixedArray )
		{
			result = header & 0xF;
<#+
	this.PushIndent( 2 );
	this.OnIsArray( "result" );
	this.WriteReturn( "result" );
	this.PopIndent();
#>
		}

		throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, <#= TypeErrorMessage #>, "array header", header, MessagePackCode.ToString( header ) ) );
	}
}// switch
#endregion UnpackArrayLength
<#+
}

/// <summary>
///		Writes map length unpacking.
/// <summary>
private void WriteUnpackMapLength()
{
#>
#region UnpackMapLength
#if DEBUG
Contract.Assert( source != null, "source != null" );
Contract.Assert( buffer != null, "buffer != null" );
#endif // DEBUG

var header = source.ReadByte();
if( header < 0 )
{
	throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
}

switch( header )
{
	case MessagePackCode.Map16: 
	{
		ReadBytes( source, buffer, 0, 2 );
		result = BigEndianBinary.ToUInt16( buffer, 0 );
<#+
	this.PushIndent( 2 );
	this.OnIsMap( "result" );
	this.WriteReturn( "result" );
	this.PopIndent();
#>
	}
	case MessagePackCode.Map32:
	{
		ReadBytes( source, buffer, 0, 4 );
<#+
// TODO: Net45_LongArray
#>
		var unsignedSize = BigEndianBinary.ToUInt32( buffer, 0 );
		if( unsignedSize > Int32.MaxValue )
		{
<#+
	this.PushIndent( 3 );
	this.WriteTooLargeException();
	this.PopIndent();
#>
		}

		result = unsignedSize;
<#+
	this.PushIndent( 2 );
	this.OnIsMap( "result" );
	this.WriteReturn( "result" );
	this.PopIndent();
#>
	}
	default:
	{
		if( MessagePackCode.MinimumFixedMap <= header && header <= MessagePackCode.MaximumFixedMap )
		{
			result = header & 0xF;
<#+
	this.PushIndent( 2 );
	this.OnIsMap( "result" );
	this.WriteReturn( "result" );
	this.PopIndent();
#>
		}

		throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, <#= TypeErrorMessage #>, "map header", header, MessagePackCode.ToString( header ) ) );
	}
}// switch
#endregion UnpackMapLength
<#+
}



private void WriteUnpackExtendedTypeObject()
{
	#>
#region UnpackExt
#if DEBUG
Contract.Assert( source != null, "source != null" );
Contract.Assert( buffer != null, "buffer != null" );
#endif // DEBUG

var header = source.ReadByte();
if( header < 0 )
{
	throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
}

switch( header )
{
<#+
	foreach ( var length in new [] { 1, 2, 4, 8, 16 } )
	{
#>
	case MessagePackCode.FixExt<#= length #>:
	{
<#+
		this.WriteUnpackFixedLengthExtendedTypeObject( length );
#>
	}
<#+
	}

	foreach ( var type in new [] { typeof( byte ), typeof( ushort ), typeof( uint ) } )
	{
#>
	case MessagePackCode.Ext<#= System.Runtime.InteropServices.Marshal.SizeOf( type ) * 8 #>:
	{
<#+
		this.WriteUnpackVariableLengthExtendedTypeObject( type );
#>
	}
<#+
	}
#>
	default:
	{
		throw new MessageTypeException( String.Format( CultureInfo.CurrentCulture, <#= TypeErrorMessage #>, "map header", header, MessagePackCode.ToString( header ) ) );
	}
}// switch
#endregion UnpackExt
<#+
}

private void WriteUnpackFixedLengthExtendedTypeObject( int length )
{
	this.WriteUnpackExtendedTypeObjectCore( length, null );
}

private void WriteUnpackVariableLengthExtendedTypeObject( Type lengthType )
{
	this.WriteUnpackExtendedTypeObjectCore( null, lengthType );
}

private void WriteUnpackExtendedTypeObjectCore( int? length, Type lengthType )
{
#>
		#region UnpackExt
<#+
	if( lengthType != null )
	{
#>

		<#= lengthType.Name  #> length;
<#+
		this.PushIndent( 2 );
		this.WriteUnpackScalar( lengthType, "length" );
		this.PopIndent();
		if( lengthType == typeof( uint ) )
		{
			// TODO: Net45_LongArray
#>

		if( length > Int32.MaxValue )
		{
<#+
			this.PushIndent( 3 );
			this.WriteTooLargeException();
			this.PopIndent();
#>
		}

<#+
		}
#>

<#+
	}
#>
		var typeCode = source.ReadByte();
		if( typeCode < 0 )
		{
			throw new InvalidMessagePackStreamException( <#= StreamEndMessage #> );
		}

		var data = new byte[ <#= length != null ? length.ToString() : "length" #> ];
<#+
	this.PushIndent( 2 );
	this.WriteUnpackRawContent( "data", "0", "data.Length" );
	this.PopIndent();
#>
		var resultMpoValue = MessagePackExtendedTypeObject.Unpack( unchecked( ( byte )typeCode ), data );
<#+
	this.PushIndent( 2 );
	this.OnReturnScalarObject( "resultMpoValue" );
	this.WriteReturn( "resultMpoValue" );
	this.PopIndent();
#>
		#endregion UnpackExt
<#+
}

private bool CanConvertTo( Type destination, String source )
{
	int size = Int32.Parse( System.Text.RegularExpressions.Regex.Match( source, "(?<Size>[0-9]+)$" ).Groups[ "Size" ].Value );
	switch( Type.GetTypeCode( destination ) )
	{
		case TypeCode.Single:
		case TypeCode.Double:
		{
			return true;
		}
		default:
		{
			return System.Runtime.InteropServices.Marshal.SizeOf( destination ) >= size / 8;
		}
	}
}
#>