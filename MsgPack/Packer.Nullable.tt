<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#
string __typeName = "Packer";
Func<Type, bool> __IsNotCLSCompliant =
type =>
	{
		return 
			type == typeof( sbyte )
			|| type == typeof( ushort )
			|| type == typeof( uint )
			|| type == typeof( ulong );
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack
{
	// This file generated from <#= __typeName #>.Nullable.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.Nullable.tt instead.

	partial class <#= __typeName #>
	{
<#
foreach( var __type in
	new []
	{
		typeof( sbyte ), typeof( byte ),
		typeof( short ), typeof( ushort ),
		typeof( int ), typeof( uint ),
		typeof( long ), typeof( ulong ),
		typeof( float ), typeof( double ),
		typeof( bool )
	}
)
{
	foreach ( var isAsync in new [] { false, true } )
	{
		var asyncSuffix = isAsync ? "Async" : String.Empty;
		var summurySuffix = isAsync ? " asynchronously" : String.Empty;

		if ( isAsync )
		{
#>
#if FEATURE_TAP

<#
		}

		foreach ( var withCancel in ( isAsync ? new [] { false, true } : new [] { false } ) )
		{
#>
		/// <summary>
		///		Pack nullable <see cref="<#= __type.Name #>"/> value<#= summurySuffix #>.
		/// </summary>
		/// <param name="value">Value to serialize.</param>
<#
			if ( !isAsync )
			{
#>
		/// <returns>This instance.</returns>
<#
			}
			else
			{
				if ( withCancel )
				{
#>
		/// <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="CancellationToken.None"/>.</param>
<#
				}
#>
		/// <returns>A <see cref="Task"/> that represents the asynchronous operation.</returns>
<#
			}
#>
<#
			if ( __IsNotCLSCompliant( __type ) )
			{
#>
		[CLSCompliant( false )]
<#
			}
#>
		public <#= ReturnValue( isAsync ) #> Pack<#= asyncSuffix #>( <#= __type.Name #>? value<#= Parameter( withCancel ) #> )
		{
<#
			if ( isAsync && !withCancel )
			{
#>
			return this.PackAsync( value, CancellationToken.None );
<#
			}
			else
			{
#>
			return value.HasValue ? this.Pack<#= asyncSuffix #>( value.Value<#= LastArgument( isAsync ) #> ) : this.PackNull<#= asyncSuffix #>(<#= Argument( isAsync ) #>);
<#
			}
#>
		}

<#
		}

		if ( isAsync )
		{
#>
#endif // FEATURE_TAP

<#
		}
	} // sync | async
}
#>
	}
}
<#+
private static string ReturnValue( bool isAsync )
{
	return isAsync ? "Task" : "Packer";
}

private static string Parameter( bool withCancel )
{
	return withCancel ? ", CancellationToken cancellationToken" : String.Empty;
}

private static string LastArgument( bool isAsync )
{
	return isAsync ? ", cancellationToken" : String.Empty;
}

private static string Argument( bool isAsync )
{
	return isAsync ? " cancellationToken " : String.Empty;
}
#>
