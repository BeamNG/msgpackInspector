<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2015 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

#if DEBUG
#define ASSERT
#endif // DEBUG

using System;
#if !UNITY || MSGPACK_UNITY_FULL
using System.ComponentModel;
#endif // !UNITY || MSGPACK_UNITY_FULL
#if ASSERT
#if FEATURE_MPCONTRACT
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // FEATURE_MPCONTRACT
#endif // ASSERT
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack.Serialization
{
	// This file is generated from UnpackHelpers.direct.tt file with T4.
	// Do not modify this cs file directly.

	partial class UnpackHelpers
	{
<#
var notCls = 
	new HashSet<Type>
	{
		typeof( sbyte ),
		typeof( ushort ),
		typeof( uint ),
		typeof( ulong ),
	};
foreach ( Type type in
	new []
	{
		typeof( bool ),
		typeof( byte ),
		typeof( short ),
		typeof( int ),
		typeof( long ),
		typeof( sbyte ),
		typeof( ushort ),
		typeof( uint ),
		typeof( ulong ),
		typeof( float ),
		typeof( double )
	}
)
{
	foreach ( var isAsync in new [] { false, true } )
	{
		if ( isAsync )
		{
#>
#if FEATURE_TAP

<#
		}
#>
		/// <summary>
		///		Invokes <see cref="Unpacker.ReadNullable<#= type.Name #>" /> and returns its result<#= SummarySuffix( isAsync ) #>.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
<#
		if ( isAsync )
		{
#>
		/// <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="T:CancellationToken.None"/>.</param>
<#
		}
#>
		/// <returns>
<#
		if ( isAsync )
		{
#>
		///		A <see cref="Task"/> that represents the asynchronous operation. 
		///		The value of the <c>TResult</c> parameter contains a value whether the operation was succeeded and
		///		an unpacked value.
<#
		}
		else
		{
#>
		///		An unpacked value.
<#
		}
#>
		/// </returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack <#= type.Name #> type value from underlying stream.
		/// </exception>
<#
		if ( notCls.Contains( type ) )
		{
#>
		[CLSCompliant( false )]
<#
		}
#>
#if !UNITY || MSGPACK_UNITY_FULL
		[EditorBrowsable( EditorBrowsableState.Never )]
#endif // !UNITY || MSGPACK_UNITY_FULL
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "False positive because never reached." )]
		public static <#= Async( type.Name, isAsync ) #> Unpack<#= type.Name #>Value<#= MethodSuffix( isAsync ) #>( Unpacker unpacker, Type objectType, String memberName<#= CancellationTokenParameter( isAsync ) #> )
		{
			if ( unpacker == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "unpacker" );
			}

			if ( objectType == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "objectType" );
			}

			if ( memberName == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "memberName" );
			}

#if ASSERT
			Contract.Assert( unpacker != null );
			Contract.Assert( objectType != null );
			Contract.Assert( memberName != null );
#endif // ASSERT

			// ReSharper disable once RedundantAssignment
			var ctx = default( UnpackerTraceContext );
			InitializeUnpackerTrace( unpacker, ref ctx );

			try
			{
<#
		if ( !isAsync )
		{
#>
				<#= type.Name #> result;
				if ( !unpacker.Read<#= type.Name #>( out result ) )
<#
		}
		else
		{
#>
				AsyncReadResult<#= "<" + type.Name + ">" #> result =
					await unpacker.Read<#= type.Name #>Async( cancellationToken ).ConfigureAwait( false );
				if ( !result.Success )
<#
		}
#>
				{
					SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, null );
				}

				Trace( ctx, "ReadDirect", unpacker, memberName );

<#
		if ( !isAsync )
		{
#>
				return result;
<#
		}
		else
		{
#>
				return result.Value;
<#
		}
#>
			}
			catch ( MessageTypeException ex )
			{
				SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, ex );
				return default( <#= type.Name #> ); // never reaches.
			}
		}

		/// <summary>
		///		Invokes <see cref="Unpacker.ReadNullable<#= type.Name #>" /> and returns its result<#= SummarySuffix( isAsync ) #>.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
<#
		if ( isAsync )
		{
#>
		/// <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="T:CancellationToken.None"/>.</param>
<#
		}
#>
		/// <returns>
<#
		if ( isAsync )
		{
#>
		///		A <see cref="Task"/> that represents the asynchronous operation. 
		///		The value of the <c>TResult</c> parameter contains a value whether the operation was succeeded and
		///		an unpacked value.
<#
		}
		else
		{
#>
		///		An unpacked value.
<#
		}
#>
		/// </returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack <#= type.Name #> type value from underlying stream.
		/// </exception>
<#
		if ( notCls.Contains( type ) )
		{
#>
		[CLSCompliant( false )]
<#
		}
#>
#if !UNITY || MSGPACK_UNITY_FULL
		[EditorBrowsable( EditorBrowsableState.Never )]
#endif // !UNITY || MSGPACK_UNITY_FULL
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification = "Task<T> for nullables essentially must be nested generic." )]
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "False positive because never reached." )]
		public static <#= Async( type.Name + "?", isAsync ) #> UnpackNullable<#= type.Name #>Value<#= MethodSuffix( isAsync ) #>( Unpacker unpacker, Type objectType, String memberName<#= CancellationTokenParameter( isAsync ) #> )
		{
			if ( unpacker == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "unpacker" );
			}

			if ( objectType == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "objectType" );
			}

			if ( memberName == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "memberName" );
			}

#if ASSERT
			Contract.Assert( unpacker != null );
			Contract.Assert( objectType != null );
			Contract.Assert( memberName != null );
#endif // ASSERT

			// ReSharper disable once RedundantAssignment
			var ctx = default( UnpackerTraceContext );
			InitializeUnpackerTrace( unpacker, ref ctx );

			try
			{
<#
		if ( !isAsync )
		{
#>
				<#= type.Name #>? result;
				if ( !unpacker.ReadNullable<#= type.Name #>( out result ) )
<#
		}
		else
		{
#>
				AsyncReadResult<#= "<" + type.Name + "?>" #> result =
					await unpacker.ReadNullable<#= type.Name #>Async( cancellationToken ).ConfigureAwait( false );
				if ( !result.Success )
<#
		}
#>
				{
					SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, null );
				}

				Trace( ctx, "ReadDirect", unpacker, memberName );

<#
		if ( !isAsync )
		{
#>
				return result;
<#
		}
		else
		{
#>
				return result.Value;
<#
		}
#>
			}
			catch ( MessageTypeException ex )
			{
				SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, ex );
				return default( <#= type.Name #>? ); // never reaches.
			}
		}

<#
		if ( isAsync )
		{
#>
#endif // FEATURE_TAP

<#
		}
	} // foreach ( var isAsync )
} // foreach ( var type )

foreach ( var isAsync in new [] { false, true } )
{
	if ( isAsync )
	{
#>
#if FEATURE_TAP

<#
	}
#>
		/// <summary>
		///		Invokes <see cref="Unpacker.ReadString" /> and returns its result<#= SummarySuffix( isAsync ) #>.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
<#
		if ( isAsync )
		{
#>
		/// <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="T:CancellationToken.None"/>.</param>
<#
		}
#>
		/// <returns>
<#
		if ( isAsync )
		{
#>
		///		A <see cref="Task"/> that represents the asynchronous operation. 
		///		The value of the <c>TResult</c> parameter contains a value whether the operation was succeeded and
		///		an unpacked value.
<#
		}
		else
		{
#>
		///		An unpacked value.
<#
		}
#>
		/// </returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack string type value from underlying stream.
		/// </exception>
#if !UNITY || MSGPACK_UNITY_FULL
		[EditorBrowsable( EditorBrowsableState.Never )]
#endif // !UNITY || MSGPACK_UNITY_FULL
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "False positive because never reached." )]
		public static <#= Async( "string", isAsync ) #> UnpackStringValue<#= MethodSuffix( isAsync ) #>( Unpacker unpacker, Type objectType, String memberName<#= CancellationTokenParameter( isAsync ) #> )
		{
			if ( unpacker == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "unpacker" );
			}

			if ( objectType == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "objectType" );
			}

			if ( memberName == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "memberName" );
			}

#if ASSERT
			Contract.Assert( unpacker != null );
			Contract.Assert( objectType != null );
			Contract.Assert( memberName != null );
#endif // ASSERT

			// ReSharper disable once RedundantAssignment
			var ctx = default( UnpackerTraceContext );
			InitializeUnpackerTrace( unpacker, ref ctx );

			try
			{
<#
		if ( !isAsync )
		{
#>
				string result;
				if ( !unpacker.ReadString( out result ) )
<#
		}
		else
		{
#>
				AsyncReadResult<string> result =
					await unpacker.ReadStringAsync( cancellationToken ).ConfigureAwait( false );
				if ( !result.Success )
<#
		}
#>
				{
					SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, null );
				}

				Trace( ctx, "ReadDirect", unpacker, memberName );

<#
		if ( !isAsync )
		{
#>
				return result;
<#
		}
		else
		{
#>
				return result.Value;
<#
		}
#>
			}
			catch ( MessageTypeException ex )
			{
				SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, ex );
				return default( string ); // never reaches.
			}
		}

		/// <summary>
		///		Invokes <see cref="Unpacker.ReadBinary" /> and returns its result<#= SummarySuffix( isAsync ) #>.
		/// </summary>
		/// <param name="unpacker">The unpacker to be used.</param>
		/// <param name="objectType">The type of the object which is deserializing now.</param>
		/// <param name="memberName">The name of the member which is deserializing now.</param>
<#
		if ( isAsync )
		{
#>
		/// <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="T:CancellationToken.None"/>.</param>
<#
		}
#>
		/// <returns>
<#
		if ( isAsync )
		{
#>
		///		A <see cref="Task"/> that represents the asynchronous operation. 
		///		The value of the <c>TResult</c> parameter contains a value whether the operation was succeeded and
		///		an unpacked value.
<#
		}
		else
		{
#>
		///		An unpacked value.
<#
		}
#>
		/// </returns>
		/// <exception cref="System.Runtime.Serialization.SerializationException">
		///		Failed to unpack byte array type value from underlying stream.
		/// </exception>
#if !UNITY || MSGPACK_UNITY_FULL
		[EditorBrowsable( EditorBrowsableState.Never )]
#endif // !UNITY || MSGPACK_UNITY_FULL
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "False positive because never reached." )]
		public static <#= Async( "byte[]", isAsync ) #> UnpackBinaryValue<#= MethodSuffix( isAsync ) #>( Unpacker unpacker, Type objectType, String memberName<#= CancellationTokenParameter( isAsync ) #> )
		{
			if ( unpacker == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "unpacker" );
			}

			if ( objectType == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "objectType" );
			}

			if ( memberName == null )
			{
				SerializationExceptions.ThrowArgumentNullException( "memberName" );
			}

#if ASSERT
			Contract.Assert( unpacker != null );
			Contract.Assert( objectType != null );
			Contract.Assert( memberName != null );
#endif // ASSERT

			// ReSharper disable once RedundantAssignment
			var ctx = default( UnpackerTraceContext );
			InitializeUnpackerTrace( unpacker, ref ctx );

			try
			{
<#
		if ( !isAsync )
		{
#>
				byte[] result;
				if ( !unpacker.ReadBinary( out result ) )
<#
		}
		else
		{
#>
				AsyncReadResult<byte[]> result =
					await unpacker.ReadBinaryAsync( cancellationToken ).ConfigureAwait( false );
				if ( !result.Success )
<#
		}
#>
				{
					SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, null );
				}

				Trace( ctx, "ReadDirect", unpacker, memberName );

<#
		if ( !isAsync )
		{
#>
				return result;
<#
		}
		else
		{
#>
				return result.Value;
<#
		}
#>
			}
			catch ( MessageTypeException ex )
			{
				SerializationExceptions.ThrowFailedToDeserializeMember( objectType, memberName, ex );
				return default( byte[] ); // never reaches.
			}
		}

<#
		if ( isAsync )
		{
#>
#endif // FEATURE_TAP

<#
		}
	} // foreach ( var isAsync )
#>
	}
}
<#+

private static string SummarySuffix( bool isAsync )
{
	return isAsync ? " asyncronously" : String.Empty;
}

private static string Async( string returnType, bool isAsync )
{
	return isAsync ? ( "async Task< " + returnType + ">" ) : returnType;
}

private static string MethodSuffix( bool isAsync )
{
	return isAsync ? "Async" : String.Empty;
}

private static string CancellationTokenParameter( bool isAsync )
{
	return isAsync ? ", CancellationToken cancellationToken" : String.Empty;
}
#>
