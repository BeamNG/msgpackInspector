<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".cs" #>
// <auto-generated>
//     This code was generated by a TeeTextWriter.tt.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.IO;
using System.Text;

namespace MsgPack.Serialization
{
	internal sealed class TeeTextWriter : TextWriter
	{
		private readonly TextWriter _main;
		private readonly TextWriter _sub;

		public override Encoding Encoding
		{
			get { return this._main.Encoding; }
		}

		public TeeTextWriter( TextWriter main, TextWriter sub )
		{
			this._main = main;
			this._sub = sub;
		}

<#
	var notInSLs = 
		new List<Tuple<string, Type[]>>
		{
			Tuple.Create( "Write", new Type[] { typeof( string ), typeof( object ), typeof( object ), typeof( object ) }),
			Tuple.Create( "WriteLine", new Type[] { typeof( string ), typeof( object ), typeof( object ), typeof( object ) })
		}; 
	var notInNetFxCores = 
		new List<Tuple<string, Type[]>>
		{
			Tuple.Create("Close", new Type[ 0 ])
		}; 
	var notInNetStd1_1s = 
		new List<Tuple<string, Type[]>>
		{
			Tuple.Create("Write", new Type[] { typeof( string ), typeof( object ) }),
			Tuple.Create("Write", new Type[] { typeof( string ), typeof( object ), typeof( object ) }),
			Tuple.Create("Write", new Type[] { typeof( string ), typeof( object ), typeof( object ), typeof( object ) }),
			Tuple.Create("WriteLine", new Type[] { typeof( string ), typeof( object ) }),
			Tuple.Create("WriteLine", new Type[] { typeof( string ), typeof( object ), typeof( object ) }),
			Tuple.Create("WriteLine", new Type[] { typeof( string ), typeof( object ), typeof( object ), typeof( object ) }),
			Tuple.Create("Close", new Type[ 0 ])
		}; 
	var notInNetStd1_3s = 
		new List<Tuple<string, Type[]>>
		{
			Tuple.Create("Close", new Type[ 0 ])
		}; 

	using (var provider = new CSharpCodeProvider())
	{
		IEnumerable<MethodInfo> methods =
			typeof(System.IO.TextWriter).GetMethods()
				.Where(m => !m.IsFinal && m.IsVirtual) // A method we can override
				.Where(m => m.ReturnType == typeof(void)) // We're generating empty methods only
				.Where(m => !m.IsSpecialName); // Exclude properties

		foreach (MethodInfo method in methods)
		{
#>

<#
			var unsupportedPlatforms = new List<string>();
			if (IsNotIn(method, notInSLs))
			{
				unsupportedPlatforms.Add("SILVERLIGHT");
			}
			if (IsNotIn(method, notInNetFxCores))
			{
				unsupportedPlatforms.Add("NETFX_CORE");
			}
			if (IsNotIn(method, notInNetStd1_1s))
			{
				unsupportedPlatforms.Add("NETSTANDARD1_1");
			}
			if (IsNotIn(method, notInNetStd1_3s))
			{
				unsupportedPlatforms.Add("NETSTANDARD1_3");
			}

			if (unsupportedPlatforms.Count > 0 )
			{
#>
#if <#= String.Join( " && ", unsupportedPlatforms.Select(s => "!" + s )) #>
<#
			}

			var parameterInfos = method.GetParameters();
			var parameters =
				parameterInfos.Length == 0
					? "()"
					: "( " + String.Join(", ", parameterInfos.Select( p => provider.GetTypeOutput( new CodeTypeReference( p.ParameterType ) ) + " " + p.Name ) ) + " )";
			var arguments =
				parameterInfos.Length == 0
					? "()"
					: "( " + String.Join(", ", parameterInfos.Select( p => p.Name ) ) + " )";

#>
		public override void <#= method.Name #><#= parameters #>
		{
			this._main.<#= method.Name #><#= arguments #>;
			this._sub.<#= method.Name #><#= arguments #>;
		}
<#
			if (unsupportedPlatforms.Count > 0 )
			{
#>
#endif // <#= String.Join( " && ", unsupportedPlatforms.Select(s => "!" + s )) #>
<#
			}
		}
	}
#>
	}
}
<#+
private static bool IsNotIn(MethodInfo method, IList<Tuple<string, Type[]>> unavailableMethodSignatures)
{
	return unavailableMethodSignatures.Any(sig => sig.Item1 == method.Name && sig.Item2.SequenceEqual(method.GetParameters().Select(p => p.ParameterType)));
}
#>
