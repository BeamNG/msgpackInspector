#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2016 FUJIWARA, Yusuke and contributors
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
// Contributors:
//    Samuel Cragg
//
#endregion -- License Terms --

// <auto-generated>
//     This code was generated by a NullTextWriter.tt.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.IO;
using System.Text;

namespace MsgPack.Serialization
{
	internal sealed class NullTextWriter : TextWriter
	{
		internal static NullTextWriter Instance = new NullTextWriter();

		public override Encoding Encoding
		{
			get { return Encoding.UTF8; }
		}

#if !NETFX_CORE && !NETSTANDARD1_1 && !NETSTANDARD1_3
		public override void Close() { }
#endif // !NETFX_CORE && !NETSTANDARD1_1 && !NETSTANDARD1_3
		public override void Flush() { }
		public override void Write( char value ) { }
		public override void Write( char[] buffer ) { }
		public override void Write( char[] buffer, int index, int count ) { }
		public override void Write( bool value ) { }
		public override void Write( int value ) { }
		public override void Write( uint value ) { }
		public override void Write( long value ) { }
		public override void Write( ulong value ) { }
		public override void Write( float value ) { }
		public override void Write( double value ) { }
		public override void Write( decimal value ) { }
		public override void Write( string value ) { }
		public override void Write( object value ) { }
#if !NETSTANDARD1_1
		public override void Write( string format, object arg0 ) { }
#endif // !NETSTANDARD1_1
#if !NETSTANDARD1_1
		public override void Write( string format, object arg0, object arg1 ) { }
#endif // !NETSTANDARD1_1
#if !SILVERLIGHT && !NETSTANDARD1_1
		public override void Write( string format, object arg0, object arg1, object arg2 ) { }
#endif // !SILVERLIGHT && !NETSTANDARD1_1
		public override void Write( string format, object[] arg ) { }
		public override void WriteLine() { }
		public override void WriteLine( char value ) { }
		public override void WriteLine( char[] buffer ) { }
		public override void WriteLine( char[] buffer, int index, int count ) { }
		public override void WriteLine( bool value ) { }
		public override void WriteLine( int value ) { }
		public override void WriteLine( uint value ) { }
		public override void WriteLine( long value ) { }
		public override void WriteLine( ulong value ) { }
		public override void WriteLine( float value ) { }
		public override void WriteLine( double value ) { }
		public override void WriteLine( decimal value ) { }
		public override void WriteLine( string value ) { }
		public override void WriteLine( object value ) { }
#if !NETSTANDARD1_1
		public override void WriteLine( string format, object arg0 ) { }
#endif // !NETSTANDARD1_1
#if !NETSTANDARD1_1
		public override void WriteLine( string format, object arg0, object arg1 ) { }
#endif // !NETSTANDARD1_1
#if !SILVERLIGHT && !NETSTANDARD1_1
		public override void WriteLine( string format, object arg0, object arg1, object arg2 ) { }
#endif // !SILVERLIGHT && !NETSTANDARD1_1
		public override void WriteLine( string format, object[] arg ) { }
	}
}
