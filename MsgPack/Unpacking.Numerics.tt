<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2015 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#
// This file defines direct integer conversion API portion of Unpackaging
var __typeName = "Unpacking";
var __numericTypes = new []
{
	typeof( byte ),
	typeof( sbyte ),
	typeof( short ), 
	typeof( ushort ),
	typeof( int ), 
	typeof( uint ), 
	typeof( long ), 
	typeof( ulong ),
	typeof( float ),
	typeof( double )
};

Func<Type,bool> __isClsCompliant = 
   type => ( type != typeof( sbyte ) && type != typeof( ushort ) && type != typeof( uint ) && type != typeof( ulong ) );

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
#if FEATURE_MPCONTRACT
using Contract = MsgPack.MPContract;
#else
using System.Diagnostics.Contracts;
#endif // FEATURE_MPCONTRACT
using System.IO;

namespace MsgPack
{
	// This file generated from <#= __typeName #>.Intgers.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.Intgers.tt instead.

	static partial class <#= __typeName #>
	{
<#
foreach( var __type in __numericTypes )
{
#>
		///	<summary>
		///		Unpacks <see cref="<#= __type #>" /> value from the head of specified byte array.
		///	</summary>
		///	<param name="source">The byte array which contains Message Pack binary stream.</param>
		///	<returns>
		///		The <see cref="UnpackingResult{T}"/> of <see cref="<#= __type #>" /> which contains unpacked <see cref="<#= __type #>" /> value and processed bytes count.
		///	</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="source"/> is <c>null</c>.
		///	</exception>
		/// <exception cref="ArgumentException">
		///		<paramref name="source"/> is empty.
		///	</exception>
		/// <exception cref="UnpackException">
		///		<paramref name="source"/> is not valid MessagePack stream.
		///	</exception>
		/// <exception cref="MessageTypeException">
		///		The unpacked result in the <paramref name="source"/> is not compatible to <see cref="<#= __type #>" />.
		///	</exception>
		/// <remarks>
		///		<para>
		/// 		Invocation of this method is equivalant to call <see cref="Unpack<#= __type.Name #>(byte[], int)"/> with <c>offset</c> is <c>0</c>.
		///		</para>
		///		<para>
		///			When the type of packed value is not known, use <see cref="UnpackObject(byte[])"/> instead.
		///		</para>
		///	</remarks>
<#
	if( !__isClsCompliant( __type ) )
	{
#>
		[CLSCompliant( false )]
<#
	}
#>
		public static UnpackingResult<#= "<" + __type.Name + ">" #> Unpack<#= __type.Name #>( byte[] source )
		{
			return Unpack<#= __type.Name #>( source, 0 );
		}

		///	<summary>
		///		Unpacks <see cref="<#= __type #>" /> value from the specified byte array.
		///	</summary>
		///	<param name="source">The byte array which contains Message Pack binary stream.</param>
		///	<param name="offset">The offset to be unpacking start with.</param>
		///	<returns>
		///		The <see cref="UnpackingResult{T}"/> of <see cref="<#= __type #>" /> which contains unpacked <see cref="<#= __type #>" /> value and processed bytes count.
		///	</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="source"/> is <c>null</c>.
		///	</exception>
		/// <exception cref="ArgumentException">
		///		<paramref name="source"/> is empty.
		///		Or, the length of <paramref name="source"/> is not grator than <paramref name="offset"/>.
		///	</exception>
		/// <exception cref="ArgumentOutOfRangeException">
		///		<paramref name="offset"/> is negative value.
		///	</exception>
		/// <exception cref="UnpackException">
		///		<paramref name="source"/> is not valid MessagePack stream.
		///	</exception>
		/// <exception cref="MessageTypeException">
		///		The unpacked result in the <paramref name="source"/> is not compatible to <see cref="<#= __type #>" />.
		///	</exception>
		/// <remarks>
		///		When the type of packed value is not known, use <see cref="UnpackObject(byte[], int)"/> instead.
		///	</remarks>
<#
	if( !__isClsCompliant( __type ) )
	{
#>
		[CLSCompliant( false )]
<#
	}
#>
		public static UnpackingResult<#= "<" + __type.Name + ">" #> Unpack<#= __type.Name #>( byte[] source, int offset )
		{
			ValidateByteArray( source, offset );
			Contract.EndContractBlock();

			using( var stream = new MemoryStream( source ) )
			{
				stream.Position = offset;
				var value = Unpack<#= __type.Name #>Core( stream );
				return new UnpackingResult<#= "<" + __type.Name + ">" #>( value, unchecked( ( int )( stream.Position - offset ) ) );
			}
		}

		///	<summary>
		///		Unpacks <see cref="<#= __type #>" /> value from the specified <see cref="Stream"/>.
		///	</summary>
		///	<param name="source">The <see cref="Stream"/> which contains Message Pack binary stream.</param>
		///	<returns>
		///		The unpacked <see cref="<#= __type #>" /> value.
		///	</returns>
		/// <exception cref="ArgumentNullException">
		///		<paramref name="source"/> is <c>null</c>.
		///	</exception>
		/// <exception cref="ArgumentException">
		///		The <see cref="P:Stream.CanRead"/> of <paramref name="source"/> is <c>false</c>.
		///	</exception>
		/// <exception cref="UnpackException">
		///		<paramref name="source"/> is not valid MessagePack stream.
		///		Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
		///	</exception>
		/// <exception cref="MessageTypeException">
		///		The unpacked result in the <paramref name="source"/> is not compatible to <see cref="<#= __type #>" />.
		///		Note that the state of <paramref name="source"/> will be unpredictable espicially it is not seekable.
		///	</exception>
		/// <remarks>
		///		<para>
		/// 		The processed bytes count can be calculated via <see cref="P:Stream.Position"/> of <paramref name="source"/> when the <see cref="P:Stream.CanSeek" /> is <c>true</c>.
		///		</para>
		///		<para>
		///			When the type of packed value is not known, use <see cref="UnpackObject(Stream)"/> instead.
		///		</para>
		///	</remarks>
<#
	if( !__isClsCompliant( __type ) )
	{
#>
		[CLSCompliant( false )]
<#
	}
#>
		public static <#= __type.Name #> Unpack<#= __type.Name #>( Stream source )
		{
			ValidateStream( source );
			Contract.EndContractBlock();

			return Unpack<#= __type.Name #>Core( source );
		}
		
		private static <#= __type.Name #> Unpack<#= __type.Name #>Core( Stream source )
		{
			using ( var unpacker = Unpacker.Create( source, false ) )
			{
				UnpackOne( unpacker );
				VerifyIsScalar( unpacker );
				try
				{
					return ( <#= __type.Name #> )unpacker.LastReadData;
				}
				catch( InvalidOperationException ex )
				{
					throw NewTypeMismatchException( typeof( <#= __type.Name #> ), ex );
				}
			}
		}
<#
}
#>
	}
}
