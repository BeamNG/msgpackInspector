<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="..\Core.ttinclude" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;

namespace MsgPack
{
	// This file was generated from SubtreeUnpacker.Unpacking.tt and Core.ttinclude T4Template.
	// Do not modify this file. Edit SubtreeUnpacker.Unpacking.tt and Core.ttinclude instead.

	partial class SubtreeUnpacker
	{
<#
foreach( var type in
	new []
	{ 
		typeof( bool ), 
		typeof( byte ), typeof( sbyte ),
		typeof( short ), typeof( ushort ),
		typeof( int ), typeof( uint ),
		typeof( long ), typeof( ulong ),
		typeof( float ), typeof( double ),
	}
)
{
#>
		public override bool Read<#= type.Name #>( out <#= type.Name #> result )
		{
<#
	this.PushIndent( 3 );
	this.WriteRead( type.Name, type.Name );
	this.PopIndent();
#>
		}

		public override bool ReadNullable<#= type.Name #>( out <#= type.Name #>? result )
		{
<#
	this.PushIndent( 3 );
	this.WriteRead( "Nullable" + type.Name, type.Name + "?" );
	this.PopIndent();
#>
		}

<#
}
#>

		public override bool ReadArrayLength( out long result )
		{
<#
this.PushIndent( 3 );
this.WriteRead( "ArrayLength", "Int64"  );
this.PopIndent();
#>
		}

		public override bool ReadMapLength( out long result )
		{
<#
this.PushIndent( 3 );
this.WriteRead( "MapLength", "Int64" );
this.PopIndent();
#>
		}

		public override bool ReadBinary( out byte[] result )
		{
<#
this.PushIndent( 3 );
this.WriteRead( "Binary", "Byte[]" );
this.PopIndent();
#>
		}

		public override bool ReadString( out string result )
		{
<#
this.PushIndent( 3 );
this.WriteRead( "String", "String" );
this.PopIndent();
#>
		}

		public override bool ReadMessagePackExtendedTypeObject( out MessagePackExtendedTypeObject result )
		{
<#
this.PushIndent( 3 );
this.WriteRead( "MessagePackExtendedTypeObject", "MessagePackExtendedTypeObject" );
this.PopIndent();
#>
		}

		public override bool ReadObject( out MessagePackObject result )
		{
<#
this.PushIndent( 3 );
this.WriteRead( "Object", "MessagePackObject", "/* isDeep */true, " );
this.PopIndent();
#>
		}
	}
}
<#+
private void WriteRead( string typeName, string fullTypeName, string isDeep = "" )
{
#>
this.DiscardCompletedStacks();

if ( this._itemsCount.Count == 0 )
{
	result = default( <#= fullTypeName #> );
	return false;
}

if ( !this._root.Read<#= typeName #>( <#= isDeep #>out result ) )
{
	return false;
}

switch ( this._internalRoot.CollectionType )
{
	case CollectionType.Array:
	{
		this._itemsCount.Push( this._root.ItemsCount );
		this._unpacked.Push( 0 );
		this._isMap.Push( false );
		break;
	}
	case CollectionType.Map:
	{
		this._itemsCount.Push( this._root.ItemsCount * 2 );
		this._unpacked.Push( 0 );
		this._isMap.Push( true );
		break;
	}
	default:
	{
		this._unpacked.Push( this._unpacked.Pop() + 1 );
		break;
	}
}

return true;
<#+
}
#>